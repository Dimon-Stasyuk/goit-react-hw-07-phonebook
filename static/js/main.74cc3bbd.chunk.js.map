{"version":3,"sources":["components/redux/contacts/contacts-actions.js","components/redux/contacts/contacts-reducers.js","components/redux/store.js","components/redux/contacts/contacts-selectors.js","components/ContactForm/ContactForm.js","components/redux/contacts/contacts-operations.js","components/Filter/Filter.js","components/ContactList/ContactList.js","App.js","index.js"],"names":["fetchContactRequest","createAction","fetchContactSuccess","fetchContactError","addContactRequest","addContactSuccess","addContactError","removeContactRequest","removeContactSuccess","removeContactError","filterChange","filterReducer","createReducer","_","payload","itemsReducer","state","filter","contact","id","loadingReducer","contactsReducer","combineReducers","items","loading","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","store","next","action","console","log","logger","configureStore","reducer","contacts","devTools","process","getContacts","getFilter","getVisiblesContacts","createSelector","name","toLowerCase","includes","connect","dispatch","addContact","number","axios","post","then","data","catch","error","useState","setName","setNumber","reset","handleInputChange","event","target","value","onSubmit","preventDefault","map","checkName","alert","type","onChange","pattern","title","required","className","removeContact","delete","onClick","handleFilterChange","fetchContacts","a","get","useEffect","window","localStorage","setItem","JSON","stringify","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+UAEaA,EAAsBC,YAAa,gCACnCC,EAAsBD,YAAa,gCACnCE,EAAoBF,YAAa,8BAEjCG,EAAoBH,YAAa,8BACjCI,EAAoBJ,YAAa,8BACjCK,EAAkBL,YAAa,4BAE/BM,EAAuBN,YAClC,iCAEWO,EAAuBP,YAClC,iCAEWQ,EAAqBR,YAAa,+BAElCS,EAAeT,YAAa,yBCFnCU,EAAgBC,YAAc,GAAD,eAChCF,GAAe,SAACG,EAAD,YAAMC,YAGlBC,EAAeH,YAAc,IAAD,mBAC/BV,GAAsB,SAACW,EAAD,YAAMC,WADG,cAE/BT,GAAoB,SAACW,EAAD,OAAUF,EAAV,EAAUA,QAAV,4BAA4BE,GAA5B,CAAmCF,OAFxB,cAG/BN,GAAuB,SAACQ,EAAD,OAAUF,EAAV,EAAUA,QAAV,OACtBE,EAAMC,QAAO,SAACC,GAAD,OAAaA,EAAQC,KAAOL,QAJX,IAO5BM,EAAiBR,aAAc,GAAD,mBACjCR,GAAoB,kBAAM,KADO,cAEjCC,GAAoB,kBAAM,KAFO,cAGjCC,GAAkB,kBAAM,KAHS,cAIjCC,GAAuB,kBAAM,KAJI,cAKjCC,GAAuB,kBAAM,KALI,cAMjCC,GAAqB,kBAAM,KANM,cAOjCT,GAAsB,kBAAM,KAPK,cAQjCE,GAAsB,kBAAM,KARK,cASjCC,GAAoB,kBAAM,KATO,IAkBrBkB,EANSC,YAAgB,CACtCC,MAAOR,EACPE,OAAQN,EACRa,QAASJ,ICxBLK,EAAU,sBACXC,YAAqB,CACtBC,kBAAmB,CACjBC,eAAgB,CAACC,IAAOC,IAAWC,IAAOC,IAASC,IAAOC,SAHhD,CALK,SAACC,GAAD,OAAW,SAACC,GAAD,OAAU,SAACC,GACzCC,QAAQC,IAAI,4EAAiBF,GAC7BD,EAAKC,MAULG,MAWaL,EARDM,YAAe,CAC3BC,QAAS,CACPC,SAAUtB,GAEZuB,UAAUC,EACVpB,e,iEC/BWqB,EAAc,SAAC9B,GAAD,OAAWA,EAAM2B,SAASpB,OAExCwB,EAAY,SAAC/B,GAAD,OAAWA,EAAM2B,SAAS1B,QAEtC+B,EAAsBC,YACjC,CAACH,EAAaC,IACd,SAACJ,EAAU1B,GACT,OAAO0B,EAAS1B,QAAO,SAACC,GAAD,OACrBA,EAAQgC,KAAKC,cAAcC,SAASnC,EAAOkC,qB,eCoEjD,IAQeE,eARS,SAACrC,GAAD,MAAY,CAClC2B,SAAUG,EAAY9B,OAGG,SAACsC,GAAD,MAAe,CACxCC,WAAY,SAACL,EAAMM,GAAP,OAAkBF,EC1DN,SAACJ,EAAMM,GAAP,OAAkB,SAACF,GAC3C,IAAMpC,EAAU,CACdgC,OACAM,UAEFF,EAASlD,KAETqD,IACGC,KAAK,iCAAkCxC,GACvCyC,MAAK,YAAe,IAAZC,EAAW,EAAXA,KACPtB,QAAQC,IAAIqB,GACZN,EAASjD,EAAkBuD,OAE5BC,OAAM,SAACC,GAAD,OAAWxD,EAAgBwD,OD6CGP,CAAWL,EAAMM,QAG3CH,EA/Ef,YAAgD,IAAzBV,EAAwB,EAAxBA,SAAUY,EAAc,EAAdA,WAC/B,EAAwBQ,mBAAS,IAAjC,mBAAOb,EAAP,KAAac,EAAb,KACA,EAA4BD,mBAAS,IAArC,mBAAOP,EAAP,KAAeS,EAAf,KAkBMC,EAAQ,WACZF,EAAQ,IACRC,EAAU,KAGNE,EAAoB,SAACC,GACzB,OAAQA,EAAMC,OAAOnB,MACnB,IAAK,OACHc,EAAQI,EAAMC,OAAOC,OACrB,MACF,IAAK,SACHL,EAAUG,EAAMC,OAAOC,OACvB,MACF,QACE,SAIN,OACE,uBAAMjC,OAAO,GAAGkC,SA7BD,SAACH,GAChBA,EAAMI,iBAPU,SAACtB,GACjB,OAAOP,EACJ8B,KAAI,SAACvD,GAAD,OAAaA,EAAQgC,KAAKC,iBAC9BC,SAASF,EAAKC,eAKbuB,CAAUxB,GACZyB,MAAM,GAAD,OAAIzB,EAAJ,8BAGPK,EAAWL,EAAMM,GACjBU,MAsBA,UACE,yCAEE,uBACEU,KAAK,OACL1B,KAAK,OACL2B,SAAUV,EACVG,MAAOpB,EACP4B,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,OAGZ,2CAEE,uBACEJ,KAAK,MACL1B,KAAK,SACL2B,SAAUV,EACVG,MAAOd,EACPsB,QAAQ,yFACRC,MAAM,giBACNC,UAAQ,OAGZ,wBAAQJ,KAAK,SAASK,UAAU,MAAhC,+BEjCS5B,G,MAAAA,aAbS,SAACrC,GAAD,MAAY,CAClCC,OAAQ8B,EAAU/B,OAGO,SAACsC,GAAD,MAAe,CACxC5C,aAAc,SAAC0D,GAAD,OAAWd,EAAS5C,EAAa0D,EAAMC,OAAOC,YAQ/CjB,EA/BA,SAAC,GAA8B,IAA5BpC,EAA2B,EAA3BA,OAAQP,EAAmB,EAAnBA,aACxB,OACE,qBAAKuE,UAAU,mBAAf,SACE,wBAAOA,UAAU,eAAjB,kCAEE,uBACEA,UAAU,eACVX,MAAOrD,EACP4D,SAAUnE,EACVkE,KAAK,OACL1B,KAAK,SACL8B,UAAQ,aC4BH3B,G,MAAAA,aAnBS,SAACrC,GAAD,MAAY,CAClC2B,SAAUK,EAAoBhC,OAGL,SAACsC,GAAD,MAAe,CACxC4B,cAAe,SAAC/D,GAAD,OAAQmC,EFSI,SAACnC,GAAD,OAAQ,SAACmC,GACpCA,EAAS/C,KAETkD,IACG0B,OADH,yCAC4ChE,IACzCwC,MAAK,kBAAML,EAAS9C,EAAqBW,OACzC0C,OAAM,SAACC,GAAD,OAAW,kBAAMR,EAAS7C,EAAmBqD,SEftBoB,CAAc/D,QAcjCkC,EAxCK,SAAC,GAAiC,IAA/BV,EAA8B,EAA9BA,SAAUuC,EAAoB,EAApBA,cAC/B,OACE,6BACGvC,EAAS8B,KAAI,YAA2B,IAAxBvB,EAAuB,EAAvBA,KAAMM,EAAiB,EAAjBA,OAAQrC,EAAS,EAATA,GAC7B,OACE,+BACE,uBAAM8D,UAAU,OAAhB,cAAyB/B,EAAzB,OACA,uBAAM+B,UAAU,MAAhB,cAAwBzB,KACxB,wBACEoB,KAAK,SACLK,UAAU,kBACVG,QAAS,kBAAMF,EAAc/D,IAH/B,0DAHOA,YCuBnB,IAWekC,eAXS,SAACrC,GAAD,MAAY,CAClCC,OAAQ8B,EAAU/B,GAClB2B,SAAUG,EAAY9B,OAGG,SAACsC,GAAD,MAAe,CACxC+B,mBAAoB,SAACjB,GAAD,OAAWd,EAAS5C,EAAa0D,EAAMC,OAAOC,SAElEgB,cAAe,kBAAMhC,EH7BM,uCAAM,WAAOA,GAAP,iBAAAiC,EAAA,6DACjCjC,EAAStD,KADwB,kBAIRyD,IAAM+B,IAAI,kCAJF,gBAIvB5B,EAJuB,EAIvBA,KAERN,EAASpD,EAAoB0D,IANE,gDAQ/BN,EAASnD,EAAkB,EAAD,KARK,yDAAN,2DGgCdkD,EAhCf,YAA2C,IAA5BV,EAA2B,EAA3BA,SAAU2C,EAAiB,EAAjBA,cAUvB,OATAG,qBAAU,WACRC,OAAOC,aAAaC,QAAQ,WAAYC,KAAKC,UAAUnD,MACtD,CAACA,IAEJ8C,qBAAU,WACRH,MAEC,IAGD,sBAAKL,UAAU,YAAf,UACE,4CACA,cAAC,EAAD,IACA,0CACA,cAAC,EAAD,IACA,cAAC,EAAD,UCtBNc,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAU9D,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJ+D,SAASC,eAAe,W","file":"static/js/main.74cc3bbd.chunk.js","sourcesContent":["import { createAction } from \"@reduxjs/toolkit\";\r\n\r\nexport const fetchContactRequest = createAction(\"contacts/fetchContactRequest\");\r\nexport const fetchContactSuccess = createAction(\"contacts/fetchContactSuccess\");\r\nexport const fetchContactError = createAction(\"contacts/fetchContactError\");\r\n\r\nexport const addContactRequest = createAction(\"contacts/addContactRequest\");\r\nexport const addContactSuccess = createAction(\"contacts/addContactSuccess\");\r\nexport const addContactError = createAction(\"contacts/addContactError\");\r\n\r\nexport const removeContactRequest = createAction(\r\n  \"contacts/removeContactRequest\",\r\n);\r\nexport const removeContactSuccess = createAction(\r\n  \"contacts/removeContactSuccess\",\r\n);\r\nexport const removeContactError = createAction(\"contacts/removeContactError\");\r\n\r\nexport const filterChange = createAction(\"contacts/filterChange\");\r\n","import { combineReducers } from \"redux\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\n\r\nimport {\r\n  filterChange,\r\n  removeContactSuccess,\r\n  removeContactRequest,\r\n  removeContactError,\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  fetchContactSuccess,\r\n  fetchContactError,\r\n  fetchContactRequest,\r\n} from \"./contacts-actions\";\r\n\r\nconst filterReducer = createReducer(\"\", {\r\n  [filterChange]: (_, { payload }) => payload,\r\n});\r\n\r\nconst itemsReducer = createReducer([], {\r\n  [fetchContactSuccess]: (_, { payload }) => payload,\r\n  [addContactSuccess]: (state, { payload }) => [...state, payload],\r\n  [removeContactSuccess]: (state, { payload }) =>\r\n    state.filter((contact) => contact.id !== payload),\r\n});\r\n\r\nconst loadingReducer = createReducer(false, {\r\n  [addContactRequest]: () => true,\r\n  [addContactSuccess]: () => false,\r\n  [addContactError]: () => false,\r\n  [removeContactRequest]: () => true,\r\n  [removeContactSuccess]: () => false,\r\n  [removeContactError]: () => false,\r\n  [fetchContactRequest]: () => true,\r\n  [fetchContactSuccess]: () => false,\r\n  [fetchContactError]: () => false,\r\n});\r\n\r\nconst contactsReducer = combineReducers({\r\n  items: itemsReducer,\r\n  filter: filterReducer,\r\n  loading: loadingReducer,\r\n});\r\n\r\nexport default contactsReducer;\r\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\r\nimport logger from \"redux-logger\";\r\nimport {\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from \"redux-persist\";\r\n\r\nimport contactsReducer from \"./contacts/contacts-reducers\";\r\n\r\nconst myMiddleware = (store) => (next) => (action) => {\r\n  console.log(\"Моя прослойка\", action);\r\n  next(action);\r\n};\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  myMiddleware,\r\n  logger,\r\n];\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactsReducer,\r\n  },\r\n  devTools: process.env.NODE_ENV === \"development\",\r\n  middleware,\r\n});\r\n\r\nexport default store;\r\n","import { createSelector } from \"reselect\";\r\n\r\nexport const getContacts = (state) => state.contacts.items;\r\n\r\nexport const getFilter = (state) => state.contacts.filter;\r\n\r\nexport const getVisiblesContacts = createSelector(\r\n  [getContacts, getFilter],\r\n  (contacts, filter) => {\r\n    return contacts.filter((contact) =>\r\n      contact.name.toLowerCase().includes(filter.toLowerCase()),\r\n    );\r\n  },\r\n);\r\n","import PropTypes from \"prop-types\";\r\nimport { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { addContact } from \"../redux/contacts/contacts-operations\";\r\nimport { getContacts } from \"../redux/contacts/contacts-selectors\";\r\nimport \"./ContactForm.css\";\r\n\r\nfunction ContactForm({ contacts, addContact }) {\r\n  const [name, setName] = useState(\"\");\r\n  const [number, setNumber] = useState(\"\");\r\n\r\n  const checkName = (name) => {\r\n    return contacts\r\n      .map((contact) => contact.name.toLowerCase())\r\n      .includes(name.toLowerCase());\r\n  };\r\n\r\n  const onSubmit = (event) => {\r\n    event.preventDefault();\r\n    if (checkName(name)) {\r\n      alert(`${name} is already in contacts.`);\r\n      return;\r\n    }\r\n    addContact(name, number);\r\n    reset();\r\n  };\r\n\r\n  const reset = () => {\r\n    setName(\"\");\r\n    setNumber(\"\");\r\n  };\r\n\r\n  const handleInputChange = (event) => {\r\n    switch (event.target.name) {\r\n      case \"name\":\r\n        setName(event.target.value);\r\n        break;\r\n      case \"number\":\r\n        setNumber(event.target.value);\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form action='' onSubmit={onSubmit}>\r\n      <label>\r\n        Name\r\n        <input\r\n          type='text'\r\n          name='name'\r\n          onChange={handleInputChange}\r\n          value={name}\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n        />\r\n      </label>\r\n      <label>\r\n        Number\r\n        <input\r\n          type='tel'\r\n          name='number'\r\n          onChange={handleInputChange}\r\n          value={number}\r\n          pattern='\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}'\r\n          title='Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +'\r\n          required\r\n        />\r\n      </label>\r\n      <button type='submit' className='btn'>\r\n        Add contact\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  contacts: getContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  addContact: (name, number) => dispatch(addContact(name, number)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\r\n\r\nContactForm.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.number.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    }),\r\n  ),\r\n};\r\n","import axios from \"axios\";\r\nimport {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  removeContactError,\r\n  removeContactRequest,\r\n  removeContactSuccess,\r\n  fetchContactError,\r\n  fetchContactRequest,\r\n  fetchContactSuccess,\r\n} from \"./contacts-actions\";\r\n\r\nexport const fetchContacts = () => async (dispatch) => {\r\n  dispatch(fetchContactRequest());\r\n\r\n  try {\r\n    const { data } = await axios.get(\"http://localhost:4000/contacts\");\r\n\r\n    dispatch(fetchContactSuccess(data));\r\n  } catch (error) {\r\n    dispatch(fetchContactError(error));\r\n  }\r\n};\r\n\r\nexport const addContact = (name, number) => (dispatch) => {\r\n  const contact = {\r\n    name,\r\n    number,\r\n  };\r\n  dispatch(addContactRequest());\r\n\r\n  axios\r\n    .post(\"http://localhost:4000/contacts\", contact)\r\n    .then(({ data }) => {\r\n      console.log(data);\r\n      dispatch(addContactSuccess(data));\r\n    })\r\n    .catch((error) => addContactError(error));\r\n};\r\n\r\nexport const removeContact = (id) => (dispatch) => {\r\n  dispatch(removeContactRequest());\r\n\r\n  axios\r\n    .delete(`http://localhost:4000/contacts/${id}`)\r\n    .then(() => dispatch(removeContactSuccess(id)))\r\n    .catch((error) => () => dispatch(removeContactError(error)));\r\n};\r\n","import PropTypes from \"prop-types\";\r\nimport React from \"react\";\r\nimport { filterChange } from \"../redux/contacts/contacts-actions\";\r\nimport { connect } from \"react-redux\";\r\nimport { getFilter } from \"../redux/contacts/contacts-selectors\";\r\nimport \"./Filter.css\";\r\n\r\nconst Filter = ({ filter, filterChange }) => {\r\n  return (\r\n    <div className='filter-container'>\r\n      <label className='filter-lable'>\r\n        Find contacts by name\r\n        <input\r\n          className='filter-input'\r\n          value={filter}\r\n          onChange={filterChange}\r\n          type='text'\r\n          name='filter'\r\n          required\r\n        />\r\n      </label>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  filter: getFilter(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  filterChange: (event) => dispatch(filterChange(event.target.value)),\r\n});\r\n\r\nFilter.propTypes = {\r\n  filter: PropTypes.string.isRequired,\r\n  filterChange: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import PropTypes from \"prop-types\";\r\nimport \"./ContactList.css\";\r\nimport { connect } from \"react-redux\";\r\nimport { removeContact } from \"../redux/contacts/contacts-operations\";\r\nimport { getVisiblesContacts } from \"../redux/contacts/contacts-selectors\";\r\n\r\nconst ContactList = ({ contacts, removeContact }) => {\r\n  return (\r\n    <ul>\r\n      {contacts.map(({ name, number, id }) => {\r\n        return (\r\n          <li key={id}>\r\n            <span className='name'> {name}:</span>\r\n            <span className='tel'> {number}</span>\r\n            <button\r\n              type='button'\r\n              className='contact-btn btn'\r\n              onClick={() => removeContact(id)}>\r\n              Удалить\r\n            </button>\r\n          </li>\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  contacts: getVisiblesContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  removeContact: (id) => dispatch(removeContact(id)),\r\n});\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n      id: PropTypes.number.isRequired,\r\n    }),\r\n  ),\r\n  removeContact: PropTypes.func,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import { useEffect } from \"react\";\r\nimport \"./style.css\";\r\nimport ContactForm from \"./components/ContactForm/ContactForm\";\r\nimport Filter from \"./components/Filter/Filter\";\r\nimport ContactList from \"./components/ContactList/ContactList\";\r\nimport { filterChange } from \"./components/redux/contacts/contacts-actions\";\r\nimport * as operations from \"./components/redux/contacts/contacts-operations\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  getContacts,\r\n  getFilter,\r\n} from \"./components/redux/contacts/contacts-selectors\";\r\n\r\nfunction App({ contacts, fetchContacts }) {\r\n  useEffect(() => {\r\n    window.localStorage.setItem(\"contacts\", JSON.stringify(contacts));\r\n  }, [contacts]);\r\n\r\n  useEffect(() => {\r\n    fetchContacts();\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  return (\r\n    <div className='container'>\r\n      <h1>Phoneboock</h1>\r\n      <ContactForm />\r\n      <h2>Contacts</h2>\r\n      <Filter />\r\n      <ContactList />\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  filter: getFilter(state),\r\n  contacts: getContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  handleFilterChange: (event) => dispatch(filterChange(event.target.value)),\r\n\r\n  fetchContacts: () => dispatch(operations.fetchContacts()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./components/redux/store\";\r\n\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\"),\r\n);\r\n"],"sourceRoot":""}